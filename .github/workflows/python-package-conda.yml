#1Лабараторная работа
#Создать словарь из пар ключ-значение, где ключи - это буквы своей фамилии, а значения - это порядковый номер буквы в алфавите, от которого взят: факториал
dict = {'А' : 1, 'ф' : 22, 'а' : 1, 'н' : 15, 'а' : 1, 'с' : 19, 'ь' : 30, 'е' : '6', 'в' : 3}
def fact(a):
    if a == 0:
        return 1
    return fact(a-1) * a
for i in dict:
    dict[i] = fact(dict[i])
print(dict)

#Отсортировать его по ключу в алфавитном порядке и сохранить в файл.
sorteddict =  sorted(dict.values())
sorted_dict = {}
for i in sorteddict:
  for j in dict.keys():
    if dict[j]==i:
      sorted_dict[j]= dict[j]
      break
print(sorteddict)
file_to_save = open('file1.txt', 'w+')
file_to_save.write(str(sorted_dict[j]))
file_to_save.close()

#Отсортировать по значениям от меньшего к большему и сохранить в файл.
dict1 = {'А' : 1, 'ф' : 22, 'а' : 1, 'н' : 15, 'а' : 1, 'с' : 19, 'ь' : 30, 'е' : '6', 'в' : 3}
sorteddict1 = sorted(dict, key=dict.get)
for i in sorteddict1:
  dict1[i]= dict[i]
print(dict1)
file_to_save = open('file2.txt', 'w+')
file_to_save.write(str(sorteddict1))
file_to_save.close()

#Создать список из значений словаря и разделить его на два: один из значений меньше среднего по списку, второй - среднее и выше
dict2 = {'А' : 1, 'ф' : 22, 'а' : 1, 'н' : 15, 'а' : 1, 'с' : 19, 'ь' : 30, 'е' : '6', 'в' : 3}
a = dict2.values()
mean = (sum(a) / len(a))
dict_small = [i for i in a if i < mean]
dict_big = [i for i in a if i > mean]
print('меньше среднего:', dict_small)
print('больше среднего:', dict_big)
#2Лабараторная работа
maze = ('######## #',
        '#  #   # #',
        '## # ### #',
        '##   #   #',
        '#  ##  ###',
        '##     # #',
        '# ## ### #',
        '# ## # # #',
        '####     #',
        '####### ##',
        '####### ##')
maze0 = [[i] for i in maze]    # Превращаем список в многомерный список
maze = []   # Каждый список делим на значения ['######## #'] --> ['#', '#', '#', '#', '#', '#', '#', '#', ' ', '#']
for row in maze0:
    for i in row:
        row = list(i)
        maze.append(row)
for row in maze:    # В каждом списке заменяем '#' на 1 и ' ' на 0
    for i in range(len(row)):
        if row[i] =='#':
            row[i] = 1
        else:
            row[i] = 0
POSSIBLE_WAYS = ('N', 'S', 'W', 'E')
def is_coord_in_maze(maze, coord):
    if coord[0]<0 or coord[0]>len(maze)-1:
        return False
    if coord[1]<0 or coord[1]>len(maze[0])-1:
        return False
    return True
def is_coord_exit(coord):
    if coord[0]>9:
        return True
    return False
def is_path_clean(maze, coord):
    if maze[coord[0]][coord[1]] == 1:
        return False
    return True
def step(coord, direction):
    if direction == 'N':
         return step_N(coord)
    elif direction == 'S':
         return step_S(coord)
    elif direction == 'E':
return step_E(coord)
    elif direction == 'W':
         return step_W(coord)
def step_N(coord):
    return [coord[0]-1, coord[1]]
def step_E(coord):
    return [coord[0], coord[1]+1]
def step_S(coord):
    return [coord[0]+1, coord[1]]
def step_W(coord):
    return [coord[0], coord[1]-1]
def cut_way_back(maze, coord):
    new_maze = list(maze)
    # how to do thing like this:
    # to cancel the way back
    new_maze[coord[0]][coord[1]] = 1
    return new_maze
def find_a_way(maze, coord):
    len_y, len_x = len(maze), len(maze[0])
    global path_to_exit, current_path
    #print('x: ', len_x, ' y:', len_y)
    #print('Start from: ', coord)
    if not is_coord_in_maze(maze, coord):
        #print('not in bounds!')
        return
    if is_coord_exit(coord):
        #print('new way is found')
        path_to_exit = current_path.copy()
        return
    for direction in POSSIBLE_WAYS:
        if is_path_clean(maze, step(coord, direction)):
         #print(direction)
            current_path.append(direction)
            find_a_way(cut_way_back(maze, coord), step(coord, direction))
            current_path.pop()

    return 

path_to_exit = [' 'len(maze)len(maze[0])]
current_path = []
start_point = [0, 8]
find_a_way(maze, start_point)
print(path_to_exit)
